"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var estados_1 = require("./estados");
var mask_1 = require("./mask");
var validate_1 = require("./validate");
var randexp_1 = require("randexp");
var placa_1 = require("./placa");
var makeGeneric = function (val, options) {
    if (options === void 0) { options = null; }
    return function () {
        if (!val.textMask || !val.textMask.map) {
            return '';
        }
        var newData = val.textMask.map(function (c, index) {
            if (options && options[index]) {
                return options[index]();
            }
            c = c.toString();
            if (c === /\d/.toString()) {
                return Math.floor(Math.random() * 10).toString();
            }
            else if (c === /[A-Za-z]/.toString()) {
                return randomLetter(1).toString();
            }
            else if (c.indexOf('/[') === 0) { // /[1-9]/ ou /[5-9]/
                c = c.replace('/[', '').replace(']/', '').split('-');
                if (parseInt(c[1])) {
                    var mult = c[1] - c[0];
                    var plus = parseInt(c[0]);
                    return (Math.floor(Math.random() * mult) + plus).toString();
                }
                else {
                    return rand(1, [c[0], c[1]]);
                }
            }
            else {
                return c;
            }
        });
        return newData.join('');
    };
};
function rand(length) {
    var ranges = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        ranges[_i - 1] = arguments[_i];
    }
    var str = ""; // the string (initialized to "")
    while (length--) { // repeat this length of times
        var ind = Math.floor(Math.random() * ranges.length); // get a random range from the ranges object
        var min = ranges[ind][0].charCodeAt(0), // get the minimum char code allowed for this range
        max = ranges[ind][1].charCodeAt(0); // get the maximum char code allowed for this range
        var c = Math.floor(Math.random() * (max - min + 1)) + min; // get a random char code between min and max
        str += String.fromCharCode(c); // convert it back into a character and append it to the string str
    }
    return str; // return str
}
function randomLetter(size, onlyCapitals) {
    if (size === void 0) { size = 1; }
    if (onlyCapitals === void 0) { onlyCapitals = false; }
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    if (onlyCapitals = false) {
        possible += "abcdefghijklmnopqrstuvwxyz";
    }
    possible = possible.split('');
    for (var i = 0; i < size; i++) {
        var pos = Math.floor(Math.random() * possible.length);
        text += possible[pos];
    }
    return text;
}
var randomEstadoSigla = function () {
    var total = estados_1.ESTADOS_SIGLA.length;
    return estados_1.ESTADOS_SIGLA[Math.floor(Math.random() * total)];
};
exports.fakerBr = {
    cep: makeGeneric(mask_1.MASKS['cep']),
    cepState: function (state) {
        return randexp_1.randexp(validate_1.CEPRange[state]);
    },
    cpf: function () {
        var cpf = makeGeneric(mask_1.MASKS['cpf'])();
        var restos = validate_1.create_cpf(cpf);
        cpf = cpf.substr(0, cpf.length - 2) + restos[0] + restos[1];
        restos = validate_1.create_cpf(cpf);
        return cpf.substr(0, cpf.length - 2) + restos[0] + restos[1];
    },
    cnpj: function () {
        var cnpj = makeGeneric(mask_1.MASKS['cnpj'])();
        cnpj = cnpj.replace(/[^\d]+/g, '');
        var restos = validate_1.create_cnpj(cnpj);
        cnpj = cnpj.substr(0, cnpj.length - 2) + restos[0] + restos[0];
        restos = validate_1.create_cnpj(cnpj);
        return cnpj.substr(0, cnpj.length - 1) + restos[1];
    },
    rg: function () {
        var random = randomEstadoSigla();
        random = random.split('');
        var makeRg = makeGeneric(mask_1.MASKS['rg'], {
            0: function () { return random[0]; },
            1: function () { return random[1]; }
        });
        return makeRg();
    },
    telefone: makeGeneric(mask_1.MASKS['telefone']),
    celular: makeGeneric(mask_1.MASKS['celular']),
    inscricaoestadual: makeGeneric(mask_1.MASKS['inscricaoestadual']),
    time: makeGeneric(mask_1.MASKS['time']),
    currency: function () {
        var x = Math.random() * 10000;
        return x.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
    },
    currencyNumber: function () {
        var x = Math.random() * 10000;
        return parseFloat(x.toFixed(2));
    },
    number: function () {
        var x = Math.random() * 10000;
        return parseFloat(x.toFixed(2));
    },
    percentage: makeGeneric(mask_1.MASKS['percentage']),
    placa: function () {
        var placa;
        do {
            placa = makeGeneric(mask_1.MASKS['placa'])();
        } while (!placa_1.validate_placa(placa));
        return placa;
    },
    processo: makeGeneric(mask_1.MASKS['processo']),
    titulo: function () {
        var titulo = makeGeneric(mask_1.MASKS['titulo'])();
        var _a = validate_1.create_titulo(titulo), dig1 = _a.dig1, dig2 = _a.dig2;
        return titulo.substr(0, titulo.length - 2) + dig1 + dig2;
    },
    renavam: function () {
        var renavam = makeGeneric(mask_1.MASKS['renavam'])();
        var dv = validate_1.create_renavam(renavam);
        return renavam.substr(0, renavam.length - 1) + dv;
    }
};
//# sourceMappingURL=faker.js.map